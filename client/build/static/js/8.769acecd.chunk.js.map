{"version":3,"sources":["components/atoms/Page.tsx","components/atoms/Buttons.tsx","components/atoms/MyLink.tsx","components/molecules/TextWrapper.tsx","components/atoms/PostWrapper.tsx","components/atoms/Inputs.tsx","components/atoms/Select.tsx","components/molecules/PageWrapper.tsx","components/organisms/Editor.tsx","components/molecules/PostController.tsx","components/molecules/NivoBar.tsx","components/molecules/NivoPie.tsx","components/molecules/SearchInput.tsx","components/organisms/StatisticsSummary.tsx","components/organisms/StatisticsTotalGame.tsx","components/organisms/StatisticsWinrate.tsx","components/organisms/StatisticsPastGame.tsx","components/page/Statistics.tsx","components/page/Mypage.tsx","components/page/Userpage.tsx","components/route/MyPage.tsx"],"names":["PageStyle","styled","span","width","theme","border","fontColor","backgroundColor","mainColor","isCurrentPage","PageLink","url","value","bold","to","ButtonStyle","button","height","Button","onClick","children","MyLinkStyle","MyLink","state","search","pathname","TextWrapperStyle","textAlign","TextWrapper","fontSize","isColor","size","PostStyle","div","grid_Template_Columnn","PostWrapper","InputTextStyle","attrs","props","style","type","InputSubmitStyle","Input","placeHolder","onChange","placeholder","select","PageBlockStyle","align","PageBlock","toolbarOptions","EditorComponent","contents","setContents","quillRef","useRef","modules","useMemo","toolbar","ref","element","current","React","memo","authorIsMe","postid","PostController","isAuthor","MyResponsiveBar","data","keys","indexBy","margin","top","right","bottom","left","padding","borderWidth","valueScale","maxValue","colors","scheme","indexScale","round","grid","defs","id","background","color","stagger","rotation","lineWidth","spacing","fill","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","role","ariaLabel","barAriaLabel","e","formattedValue","indexValue","MyResponsivePie","innerRadius","padAngle","cornerRadius","activeOuterRadiusOffset","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsSkipAngle","arcLabelsTextColor","ItemContainer","StatisticsSummary","gameCountPerLevel","best","winCount","StatisticsTotalGame","totalGame","StatisticsWinrate","winRate","level","easy","normal","hard","StatisticsPastGame","pastGame","pastGameContentFontSize","pastGameHeader","map","ele","idx","String","record","success","date","StatisticsWrapper","Statisticks","userid","useState","Array","length","v","i","label","setGameCountPerLevel","setPastGame","setWinRate","setBest","setTotalGame","setWinCount","useEffect","axiosApi","get","then","res","easytotal","normaltotal","hardtotal","easywin","normalwin","hardwin","ebest","nbest","hbest","prev","Math","floor","catch","MyPage","history","useSelector","login","isLogin","replace","Header","selected","UserPage","location","params","MyPageRouter","exact","path","component","Userpage","NotFound"],"mappings":"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","file":"static/js/8.769acecd.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IPageStyle {\r\n  bold: boolean;\r\n  border?: boolean;\r\n  width?: string;\r\n  isCurrentPage?: boolean;\r\n  backgroundColor?: boolean;\r\n};\r\n\r\nexport interface IPage extends IPageStyle {\r\n  url: string;\r\n  value: string;\r\n};\r\n\r\nconst PageStyle = styled.span<IPageStyle>`\r\n  width: ${({ width }) => width};\r\n  border : ${({ theme, border }) => {\r\n    return border === true ? `1px solid ${theme.fontColor}` : 'none'\r\n  }};\r\n  background-color: ${({ theme, backgroundColor }) => {\r\n    return backgroundColor === true ? theme.mainColor : 'none'\r\n  }};\r\n\r\n  cursor:pointer;\r\n  display:inline-block;\r\n\r\n  font-family: 'Tajawal', sans-serif;\r\n  border-radius:5px;\r\n  margin: 0.8rem 0;\r\n  text-align:center;\r\n\r\n  a {\r\n    color:${({ theme, isCurrentPage }) => {\r\n    return isCurrentPage === true ? theme.mainColor : theme.fontColor;\r\n  }};\r\n\r\n    text-decoration: none;\r\n    &:hover{\r\n      color:${({ theme }) => theme.mainColor};\r\n  }};\r\n}\r\n`;\r\n\r\nconst PageLink = ({\r\n  url,\r\n  width,\r\n  border,\r\n  isCurrentPage,\r\n  value,\r\n  bold,\r\n  backgroundColor }: IPage) => {\r\n\r\n  return (\r\n    <>\r\n      <PageStyle\r\n        bold={bold}\r\n        width={width}\r\n        border={border}\r\n        isCurrentPage={isCurrentPage}\r\n        backgroundColor={backgroundColor}\r\n      >\r\n        <Link to={url}>\r\n          {value}\r\n        </Link>\r\n      </PageStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PageLink;","import styled from 'styled-components';\r\n\r\nexport interface IButton {\r\n  width: string;\r\n  height: string;\r\n  backgroundColor?: string;\r\n  fontColor?: string;\r\n  onClick?: React.MouseEventHandler<HTMLButtonElement>,\r\n  border?: boolean;\r\n  children?: any;\r\n}\r\n\r\nexport const ButtonStyle = styled.button<Partial<IButton>>`\r\n  cursor:pointer;\r\n  width: ${({ width }) => width};\r\n  height:${({ height }) => height};\r\n  color:${({ fontColor, theme }) => {\r\n    return fontColor ? fontColor : theme.fontColor\r\n  }};\r\n  background-color: ${({ backgroundColor, theme }) => {\r\n    return backgroundColor ? backgroundColor : theme.mainColor\r\n  }};\r\n  border-radius: 5px;\r\n  border : ${({ border, theme }) => {\r\n    return border === true ? `2px solid ${theme.mainColor}` : 'none';\r\n  }};\r\n  font-family :'Roboto', sans-serif;\r\n`;\r\n\r\nconst SkinismButtonStyle = styled.button<Partial<IButton>>`\r\n  cursor:pointer;\r\n  width: ${({ width }) => width};\r\n  height:${({ height }) => height};\r\n  color:${({ fontColor }) => fontColor};\r\n  background-color: 'none';\r\n  border-radius: 5px;\r\n  border-top: 0.5px solid white;\r\n  border-left: 0.5px solid #eee;\r\n  font-family :'Roboto', sans-serif;\r\n`;\r\n\r\nconst Button = ({\r\n  width,\r\n  height,\r\n  backgroundColor,\r\n  fontColor,\r\n  border,\r\n  onClick,\r\n  children }: IButton) => {\r\n\r\n  return (\r\n    <>\r\n      <ButtonStyle\r\n        width={width}\r\n        height={height}\r\n        backgroundColor={backgroundColor}\r\n        onClick={onClick}\r\n        fontColor={fontColor}\r\n        border={border}\r\n      >{children}\r\n      </ButtonStyle >\r\n    </>\r\n  )\r\n}\r\n\r\nconst SkinismButton = ({\r\n  width,\r\n  height,\r\n  fontColor,\r\n  onClick,\r\n  children }: IButton) => {\r\n\r\n  return (\r\n    <>\r\n      <SkinismButtonStyle\r\n        width={width}\r\n        height={height}\r\n        onClick={onClick}\r\n        fontColor={fontColor}\r\n      >{children}\r\n      </SkinismButtonStyle >\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Button, SkinismButton };\r\n","import { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\ninterface IMyLink {\r\n  url: string;\r\n  state?: any;\r\n  search?: string;\r\n  children?: any;\r\n}\r\n\r\n// 이 컴포넌트는\r\n// 링크안에 컴포넌트 집어넣고 싶을 때\r\n// 주로 텍스트에서 링크를 클릭할테니\r\n// 텍스트용 !!\r\nconst MyLinkStyle = styled.span`\r\n  margin:0 0.2rem;\r\n  a {\r\n    text-decoration:none;\r\n  }\r\n`;\r\n\r\nconst MyLink = ({ url, state, search, children }: IMyLink) => {\r\n\r\n  return (\r\n    <>\r\n      <MyLinkStyle>\r\n        <Link to={{\r\n          pathname: url,\r\n          state: state,\r\n          search: search\r\n        }}\r\n        >\r\n          {children}\r\n        </Link>\r\n      </MyLinkStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyLink;","import styled from 'styled-components';\r\nimport { InlineText } from '../atoms/Text';\r\n\r\ninterface ITextWrapper {\r\n  width?: string;\r\n  fontSize?: string;\r\n  value?: string;\r\n  isColor?: boolean;\r\n  paddingLeft?: string;\r\n  textAlign?: string;\r\n  bold?:boolean;\r\n  children?: any;\r\n}\r\n\r\n// const TextWrapperStyle = styled.span<ITextWrapper>`\r\n//   display: flex;\r\n//   justify-content: ${({ justifyContent }) => justifyContent};\r\n//   align-items: center;\r\n//   width: ${({ width }) => width};\r\n//   padding-left: ${({ paddingLeft }) => paddingLeft};\r\n// `;\r\n\r\nconst TextWrapperStyle = styled.span<ITextWrapper>`\r\n  display: inline-block;\r\n  width: ${({ width }) => width};\r\n  text-align: ${({ textAlign }) => textAlign};\r\n  position:relative;\r\n`;\r\n\r\nconst TextWrapper = ({\r\n  width = 'none',\r\n  fontSize,\r\n  value,\r\n  isColor,\r\n  textAlign,\r\n  bold,\r\n  children }: ITextWrapper) => {\r\n\r\n  return (\r\n    <>\r\n      <TextWrapperStyle\r\n        width={width}\r\n        textAlign={textAlign}\r\n      >\r\n        <InlineText\r\n          size={fontSize}\r\n          value={value}\r\n          isColor={isColor}\r\n          bold={bold}\r\n        />\r\n        {children}\r\n      </TextWrapperStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TextWrapper;","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\ninterface IPostWrapper {\r\n  children: any;\r\n  backgroundColor: string;\r\n  grid_Template_Columnn: string;\r\n}\r\n\r\nexport const PostStyle = styled.div<IPostWrapper>`\r\n  display: grid;\r\n  position: relative;\r\n  margin : 9px 0;\r\n  min-height: 2.5rem;\r\n  border-radius: 7px;\r\n  background-color: ${({ backgroundColor }) => backgroundColor};\r\n  grid-template-columns: ${({ grid_Template_Columnn }) => grid_Template_Columnn};\r\n  box-shadow: 5px 5px 8px 0px rgb(175, 175, 175);\r\n  border-top: 0.5px solid white;\r\n  border-left: 0.5px solid #eee;\r\n  padding-left: 1.0rem;\r\n  align-items: center;\r\n`;\r\n\r\n\r\nconst PostWrapper = ({ children, backgroundColor, grid_Template_Columnn }: IPostWrapper) => {\r\n\r\n  return (\r\n    <>\r\n      <PostStyle\r\n        backgroundColor={backgroundColor}\r\n        grid_Template_Columnn={grid_Template_Columnn}\r\n      >\r\n        {children}\r\n      </PostStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PostWrapper;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface IInputStyle {\r\n  type: string;\r\n  value: string;\r\n  width: string;\r\n  height: string;\r\n  backgroundColor: string;\r\n  placeHolder?: string;\r\n  onChange?: React.Dispatch<React.SetStateAction<any>>;\r\n  border?: string;\r\n}\r\n\r\nconst InputTextStyle = styled('input').attrs((props: IInputStyle) => ({\r\n  style: {\r\n    type: 'text',\r\n    value: props.value\r\n  }\r\n})) <IInputStyle>`\r\n  width: ${({ width }) => width};\r\n  height:${({ height }) => height};\r\n  background-color: ${({ backgroundColor }) => backgroundColor};\r\n  border:none;\r\n  margin-right: 0.7rem;\r\n  font-size:1.0rem;\r\n  outline: 1px solid ${({ theme }) => theme.mainColor};\r\n  border-radius: 8px;\r\n\r\n  &:focus {\r\n    outline: 2px solid ${({ theme }) => theme.mainColor};\r\n  }\r\n`;\r\n\r\nconst InputSubmitStyle = styled('input').attrs((props: IInputStyle) => ({\r\n  style: {\r\n    type: 'submit',\r\n    value: props.value\r\n  }\r\n})) <IInputStyle>`\r\n  width: ${({ width }) => width};\r\n  height:${({ height }) => height};\r\n  background-color: ${({ backgroundColor }) => backgroundColor};\r\n  border:none;\r\n  color:white;\r\n  font-family: 'Roboto', sans-serif;\r\n  border-radius:7px;\r\n  font-size: 0.9rem;\r\n\r\n  &:hover{\r\n    cursor:pointer;\r\n    background: linear-gradient(70deg,#1033e3, #f74bf7);\r\n  }\r\n`;\r\n\r\nconst Input = ({ type, value, width, height, backgroundColor, placeHolder = '', onChange }: Partial<IInputStyle>) => {\r\n\r\n  switch (type) {\r\n    case 'text':\r\n      return (\r\n        <>\r\n          <InputTextStyle\r\n            type={type}\r\n            value={value}\r\n            width={width}\r\n            height={height}\r\n            backgroundColor={backgroundColor}\r\n            onChange={onChange}\r\n            placeholder={placeHolder}\r\n          />\r\n        </>\r\n      )\r\n    case 'submit':\r\n      return (\r\n        <>\r\n          <InputSubmitStyle\r\n            type={type}\r\n            value={value}\r\n            width={width}\r\n            height={height}\r\n            backgroundColor={backgroundColor}\r\n            onChange={onChange}\r\n            placeholder={placeHolder}\r\n          />\r\n        </>\r\n      )\r\n    default: break;\r\n  }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ISelectStyle {\r\n  width: string;\r\n  height: string;\r\n  option: string[][];\r\n}\r\n\r\nconst SelectStyle = styled.select<Partial<ISelectStyle>>`\r\n  width: ${({ width }) => width}rem;\r\n  height:${({ height }) => height}rem;\r\n  font-family: 'Tajawal', sans-serif;\r\n  margin : 0 0.5rem;\r\n`;\r\n\r\nconst Select = ({ width, height, option }: ISelectStyle) => {\r\n\r\n  const optionList: JSX.Element[] = option.map((ele, idx) => {\r\n\r\n    const [key, value] = ele;\r\n    return (\r\n      <option\r\n        key={idx}\r\n        value={key}\r\n      >{value}\r\n      </option>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <SelectStyle\r\n        width={width}\r\n        height={height}\r\n      >\r\n        {optionList}\r\n      </SelectStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Select;","import PageLink, { IPage } from '../atoms/Page';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IPageBlock extends IPage {\r\n  align: string;\r\n}\r\n\r\nconst PageBlockStyle = styled.div<Partial<IPageBlock>>`\r\n  text-align:${({align}) => align};\r\n`;\r\n\r\nconst PageBlock = ({ align, url, width, value, bold, border }: IPageBlock) => {\r\n\r\n  return (\r\n    <>\r\n      <PageBlockStyle\r\n        align={align}\r\n      >\r\n        <PageLink\r\n          url={`${url}`}\r\n          width={width}\r\n          value={value}\r\n          bold={bold}\r\n          border={border}\r\n        />\r\n      </PageBlockStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PageBlock;","import React, { useRef, useMemo } from \"react\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\n\r\nvar toolbarOptions = [\r\n\r\n  ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n  ['blockquote', 'code-block'],\r\n\r\n  [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n  [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript\r\n  [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent\r\n  [{ 'direction': 'rtl' }],                         // text direction\r\n  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n  [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\r\n  [{ 'font': [] }],\r\n  [{ 'align': [] }],\r\n  ['clean']                                         // remove formatting button\r\n];\r\n\r\ntype StateCallback = React.Dispatch<React.SetStateAction<any>>;\r\n\r\ninterface IEditorProps {\r\n  contents: string;\r\n  setContents: StateCallback;\r\n}\r\n\r\nconst EditorComponent = ({ contents, setContents }: IEditorProps) => {\r\n\r\n  const quillRef = useRef<ReactQuill>();\r\n\r\n  const modules = useMemo(() => ({\r\n    toolbar: toolbarOptions\r\n  }), []);\r\n\r\n  return (\r\n    <>\r\n      <ReactQuill\r\n        ref={element => {\r\n          if (element !== null)\r\n            quillRef.current = element;\r\n        }}\r\n        value={contents}\r\n        onChange={setContents}\r\n        modules={modules}\r\n        theme=\"snow\"\r\n        style={{\r\n          height: '87%',\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n};\r\n\r\nexport default React.memo(EditorComponent);","import React from 'react';\r\nimport { InlineText } from '../atoms/Text';\r\nimport MyLink from '../atoms/MyLink';\r\n\r\ninterface IPostController {\r\n  isAuthor: boolean;\r\n  postid: number;\r\n}\r\n\r\nconst authorIsMe = ({ postid }: Partial<IPostController>) => {\r\n\r\n  return (\r\n    <>\r\n      <MyLink\r\n        url={'/community/update'}\r\n      >\r\n        <InlineText\r\n          size={'1.4rem'}\r\n          isColor={false}\r\n          value={'↺'}\r\n        />\r\n      </MyLink>\r\n      <MyLink\r\n        url={'/community/delete'}\r\n        search={`?postid=${postid}`}\r\n      >\r\n        <InlineText\r\n          size={'1.4rem'}\r\n          isColor={false}\r\n          value={'ⅹ'}\r\n        />\r\n      </MyLink>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function PostController({ isAuthor, postid }: IPostController) {\r\n\r\n  return (\r\n    <>\r\n      <MyLink\r\n        url={'/community'}\r\n        search={'?page=1'}\r\n      >\r\n        <InlineText\r\n          size={'1.4rem'}\r\n          isColor={false}\r\n          value={'≡'}\r\n        />\r\n      </MyLink>\r\n      {isAuthor && authorIsMe({ postid })}\r\n    </>\r\n  )\r\n}","import { ResponsiveBar, BarDatum } from '@nivo/bar'\r\n\r\nexport interface INivo<T> {\r\n  data: T[];\r\n}\r\n\r\nexport default function MyResponsiveBar({ data }: INivo<BarDatum>) {\r\n\r\n  return (\r\n    <>\r\n      <ResponsiveBar\r\n        data={data}\r\n        keys={['easy', 'normal', 'hard']}\r\n        indexBy=\"level\"\r\n        margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n        padding={0.55}\r\n        borderWidth={2}\r\n        valueScale={{ type: 'linear' }}\r\n        maxValue={100}\r\n        colors={{ scheme: 'accent' }}\r\n        indexScale={{ type: 'band', round: true }}\r\n        theme={{\r\n          fontSize: 14,\r\n          \"axis\": {\r\n            \"ticks\": {\r\n              \"line\": {\r\n                \"stroke\": \"black\",\r\n                \"strokeWidth\": 8\r\n              }\r\n            }\r\n          },\r\n          grid: {\r\n            \"line\": {\r\n              \"stroke\": \"#383640\",\r\n              \"strokeWidth\": 1\r\n            }\r\n          }\r\n        }}\r\n        defs={[\r\n          {\r\n            id: 'dots',\r\n            type: 'patternDots',\r\n            background: 'inherit',\r\n            color: '#38bcb2',\r\n            size: 4,\r\n            padding: 1,\r\n            stagger: true\r\n          },\r\n          {\r\n            id: 'lines',\r\n            type: 'patternLines',\r\n            background: 'inherit',\r\n            color: '#eed312',\r\n            rotation: -45,\r\n            lineWidth: 6,\r\n            spacing: 10\r\n          }\r\n        ]}\r\n        fill={[\r\n          {\r\n            match: {\r\n              id: 'easy'\r\n            },\r\n            id: 'dots'\r\n          },\r\n          {\r\n            match: {\r\n              id: 'hard'\r\n            },\r\n            id: 'lines'\r\n          }\r\n        ]}\r\n        borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n        axisTop={null}\r\n        axisRight={null}\r\n        axisBottom={{\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: '',\r\n          legendPosition: 'middle',\r\n          legendOffset: 32\r\n        }}\r\n        axisLeft={{\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: '',\r\n          legendPosition: 'middle',\r\n          legendOffset: -40\r\n        }}\r\n        labelSkipWidth={12}\r\n        labelSkipHeight={12}\r\n        labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n        legends={[\r\n          {\r\n            dataFrom: 'keys',\r\n            anchor: 'bottom-right',\r\n            direction: 'column',\r\n            justify: false,\r\n            translateX: 120,\r\n            translateY: 0,\r\n            itemsSpacing: 2,\r\n            itemWidth: 100,\r\n            itemHeight: 20,\r\n            itemDirection: 'left-to-right',\r\n            itemOpacity: 0.85,\r\n            symbolSize: 20,\r\n            effects: [\r\n              {\r\n                on: 'hover',\r\n                style: {\r\n                  itemOpacity: 1\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ]}\r\n        role=\"application\"\r\n        ariaLabel=\"Nivo bar chart demo\"\r\n        barAriaLabel={function (e) { return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","import { ResponsivePie } from '@nivo/pie'\r\n\r\nexport interface INivo<T> {\r\n  data: T[];\r\n}\r\n\r\nexport interface PieData {\r\n  id: string;\r\n  label: string;\r\n  value: number;\r\n  color?: string;\r\n}\r\n\r\nexport default function MyResponsivePie({ data }: INivo<PieData>) {\r\n\r\n  return (\r\n    <>\r\n      <ResponsivePie\r\n        data={data}\r\n        margin={{ top: 40, right: 60, bottom: 80, left: 80 }}\r\n        innerRadius={0.5}\r\n        padAngle={0.7}\r\n        cornerRadius={3}\r\n        activeOuterRadiusOffset={8}\r\n        borderWidth={2}\r\n        borderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}\r\n        arcLinkLabelsSkipAngle={10}\r\n        arcLinkLabelsTextColor=\"#333333\"\r\n        arcLinkLabelsThickness={2}\r\n        arcLinkLabelsColor={{ from: 'color' }}\r\n        arcLabelsSkipAngle={10}\r\n        arcLabelsTextColor={{ from: 'color', modifiers: [['darker', 2]] }}\r\n        colors={{ scheme: 'accent' }}\r\n        theme={{ \r\n          fontSize: 14,\r\n        }}\r\n        defs={[\r\n          {\r\n            id: 'dots',\r\n            type: 'patternDots',\r\n            background: 'inherit',\r\n            color: 'rgba(255, 255, 255, 0.3)',\r\n            size: 4,\r\n            padding: 1,\r\n            stagger: true\r\n          },\r\n          {\r\n            id: 'lines',\r\n            type: 'patternLines',\r\n            background: 'inherit',\r\n            color: 'rgba(255, 255, 255, 0.3)',\r\n            rotation: -45,\r\n            lineWidth: 6,\r\n            spacing: 10\r\n          }\r\n        ]}\r\n        fill={[\r\n          {\r\n            match: {\r\n              id: 'easy'\r\n            },\r\n            id: 'dots'\r\n          },\r\n          {\r\n            match: {\r\n              id: 'normal'\r\n            },\r\n            id: ''\r\n          },\r\n          {\r\n            match: {\r\n              id: 'hard'\r\n            },\r\n            id: 'lines'\r\n          }\r\n        ]}\r\n        legends={[\r\n          {\r\n            anchor: 'bottom',\r\n            direction: 'row',\r\n            justify: false,\r\n            translateX: 20,\r\n            translateY: 60,\r\n            itemWidth: 99,\r\n            itemHeight: 44,\r\n            itemsSpacing: 0,\r\n            symbolSize: 22,\r\n            itemDirection: 'left-to-right'\r\n          }\r\n        ]}\r\n      />\r\n    </>\r\n  )\r\n}","import styled from 'styled-components';\r\nimport Input from '../atoms/Inputs';\r\nimport { ButtonStyle } from '../atoms/Buttons';\r\n\r\ninterface ISearchInput {\r\n  children?: any;\r\n}\r\n\r\nconst InputWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 1.0rem;\r\n  margin: 1.2rem 0;\r\n  min-width:500px;\r\n`;\r\n\r\nconst SearchButton = styled(ButtonStyle)`\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.mainColor};\r\n    color:white;\r\n  }\r\n`;\r\n\r\nconst SearchInput = ({ children }: ISearchInput) => {\r\n\r\n  return (\r\n    <>\r\n      <InputWrapper>\r\n        {children}\r\n      </InputWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SearchInput;","import styled from 'styled-components';\r\nimport { HeaderText, InlineText } from '../atoms/Text';\r\nimport TextWrapper from '../molecules/TextWrapper';\r\nimport { PieData } from '../molecules/NivoPie'\r\n\r\nconst ItemContainer = styled.div<{ height: string }>`\r\n  width:100%;\r\n  height: ${({ height }) => height};\r\n  border-radius:8px;\r\n  padding:20px;\r\n  box-shadow: 4px 4px 14px -2px rgb(245,234,232);\r\n  margin-bottom:2.0rem;\r\n`;\r\n\r\ninterface IStatisticsSummary {\r\n  gameCountPerLevel: PieData[];\r\n  best: number[];\r\n  winCount: number[];\r\n}\r\n\r\nexport default function StatisticsSummary({ gameCountPerLevel, best, winCount }: IStatisticsSummary) {\r\n\r\n  return (\r\n    <>\r\n      <ItemContainer\r\n        height={'none'}\r\n      >\r\n        <TextWrapper\r\n          width={'100%'}\r\n          textAlign={'left'}\r\n        >\r\n          <div style={{ margin: '20px 0' }}>\r\n            <HeaderText\r\n              size={'1.15rem'}\r\n              value={`Easy`}\r\n              isColor={true}\r\n              margin={'0 0'}\r\n            />\r\n            <InlineText\r\n              size={'1.0rem'}\r\n              value={`total : ${gameCountPerLevel[0].value} win : ${winCount[0]} best : ${best[0]}`}\r\n              isColor={false}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <HeaderText\r\n              size={'1.15rem'}\r\n              value={`Normal`}\r\n              isColor={true}\r\n              margin={'0 0'}\r\n            />\r\n            <InlineText\r\n              size={'1rem'}\r\n              value={`total : ${gameCountPerLevel[1].value} win : ${winCount[1]} best : ${best[1]}`}\r\n              isColor={false}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <HeaderText\r\n              size={'1.15rem'}\r\n              value={`Hard`}\r\n              isColor={true}\r\n              margin={'0 0'}\r\n            />\r\n            <InlineText\r\n              size={'1.0'}\r\n              value={`total : ${gameCountPerLevel[2].value} win : ${winCount[2]} best : ${best[2]}`}\r\n              isColor={false}\r\n            />\r\n          </div>\r\n        </TextWrapper>\r\n      </ItemContainer>\r\n    </>\r\n  )\r\n}\r\n","import styled from 'styled-components';\r\nimport { HeaderText } from '../atoms/index';\r\nimport MyResponsivePie, { PieData } from '../molecules/NivoPie'\r\n\r\nconst ItemContainer = styled.div<{ height: string }>`\r\n  width:100%;\r\n  height: ${({ height }) => height};\r\n  border-radius:8px;\r\n  padding:20px;\r\n  box-shadow: 4px 4px 14px -2px rgb(245,234,232);\r\n  margin-bottom:2.0rem;\r\n`;\r\n\r\ninterface IStatisticsTotalGame {\r\n  totalGame: number;\r\n  gameCountPerLevel: PieData[];\r\n}\r\n\r\nexport default function StatisticsTotalGame({ totalGame, gameCountPerLevel }: IStatisticsTotalGame) {\r\n\r\n  return (\r\n    <>\r\n      <ItemContainer\r\n        height={'450px'}\r\n      >\r\n        <HeaderText\r\n          size={'1.15rem'}\r\n          value={`TotalGame : ${totalGame}`}\r\n          isColor={true}\r\n          margin={'0 0px'}\r\n        />\r\n        <MyResponsivePie data={gameCountPerLevel} />\r\n      </ItemContainer>\r\n    </>\r\n  )\r\n}","import styled from 'styled-components';\r\nimport { HeaderText } from '../atoms/index';\r\nimport { MyResponsiveBar } from '../molecules/index';\r\n\r\nconst ItemContainer = styled.div<{ height: string }>`\r\n  width:100%;\r\n  height: ${({ height }) => height};\r\n  border-radius:8px;\r\n  padding:20px;\r\n  box-shadow: 4px 4px 14px -2px rgb(245,234,232);\r\n  margin-bottom:2.0rem;\r\n`;\r\n\r\nexport default function StatisticsWinrate({ winRate }: { winRate: number[] }) {\r\n\r\n  return (\r\n    <>\r\n      <ItemContainer\r\n        height={'450px'}\r\n      >\r\n        <HeaderText\r\n          size={'1.15rem'}\r\n          value={'WinRate'}\r\n          isColor={true}\r\n          margin={'0 0'}\r\n        />\r\n        <MyResponsiveBar data={[{\r\n          level: 'easy',\r\n          easy: winRate[0]\r\n        }, {\r\n          level: 'normal',\r\n          normal: winRate[1]\r\n        }, {\r\n          level: 'hard',\r\n          hard: winRate[2]\r\n        }]} />\r\n      </ItemContainer>\r\n    </>\r\n  )\r\n}","import styled from 'styled-components';\r\nimport {\r\n  PostWrapper\r\n} from '../atoms/index';\r\n\r\nimport {\r\n  HeaderText,\r\n} from '../atoms/index';\r\n\r\nimport {\r\n  TextWrapper\r\n} from '../molecules/index';\r\n\r\nconst ItemContainer = styled.div<{ height: string }>`\r\n  width:100%;\r\n  height: ${({ height }) => height};\r\n  border-radius:8px;\r\n  padding:20px;\r\n  box-shadow: 4px 4px 14px -2px rgb(245,234,232);\r\n  margin-bottom:2.0rem;\r\n`;\r\n\r\nexport default function StatisticsPastGame({ pastGame }) {\r\n\r\n  const pastGameContentFontSize = '1.0rem' as const;\r\n  const pastGameHeaderFontSize = '1.1rem' as const;\r\n  const pastGameHeader: JSX.Element[] = [\r\n    {\r\n      align: 'left',\r\n      value: ''\r\n    }, {\r\n      align: 'left',\r\n      value: 'Level',\r\n    }, {\r\n      align: 'center',\r\n      value: 'Record',\r\n    }, {\r\n      align: 'center',\r\n      value: 'Success',\r\n    }, {\r\n      align: 'left',\r\n      value: 'Date',\r\n    }].map((ele, idx) => {\r\n\r\n      const { align, value } = ele;\r\n      return (\r\n        <TextWrapper\r\n          key={idx}\r\n          textAlign={align}\r\n          fontSize={pastGameHeaderFontSize}\r\n          value={value}\r\n        />\r\n      )\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <ItemContainer\r\n        height={'none'}\r\n      >\r\n        <HeaderText\r\n          size={'1.15rem'}\r\n          value={'PastGame'}\r\n          isColor={true}\r\n          margin={'20px 0'}\r\n        />\r\n        <PostWrapper\r\n          backgroundColor={'none'}\r\n          grid_Template_Columnn={'repeat(5, 1fr)'}\r\n        >\r\n          {pastGameHeader}\r\n        </PostWrapper>\r\n        {pastGame.map((ele, idx) => {\r\n          return (\r\n            <PostWrapper\r\n              key={idx}\r\n              backgroundColor={'none'}\r\n              grid_Template_Columnn={'repeat(5, 1fr)'}\r\n            >\r\n              <TextWrapper\r\n                textAlign={'left'}\r\n                fontSize={pastGameContentFontSize}\r\n                value={String(idx)}\r\n                bold={true}\r\n                isColor={true}\r\n              />\r\n              <TextWrapper\r\n                textAlign={'left'}\r\n                fontSize={pastGameContentFontSize}\r\n                value={ele.level}\r\n              />\r\n              <TextWrapper\r\n                textAlign={'center'}\r\n                fontSize={pastGameContentFontSize}\r\n                value={String(ele.record)}\r\n              />\r\n              <TextWrapper\r\n                textAlign={'center'}\r\n                fontSize={pastGameContentFontSize}\r\n                value={String(ele.success)}\r\n              />\r\n              <TextWrapper\r\n                textAlign={'left'}\r\n                fontSize={pastGameContentFontSize}\r\n                value={ele.date}\r\n              />\r\n            </PostWrapper>\r\n          )\r\n        })}\r\n      </ItemContainer>\r\n    </>\r\n  )\r\n}\r\n","import Header from '../Header';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport axiosApi, { Response } from '../../modules/API';\r\nimport { RootState } from '../../reducers';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport {\r\n  HeaderText,\r\n}from '../atoms/index';\r\n\r\nimport {\r\n  TextWrapper\r\n}from '../molecules/index';\r\nimport { PieData } from '../molecules/NivoPie';\r\n\r\nimport {\r\n  StatisticsTotalGame,\r\n  StatisticsSummary,\r\n  StatisticsWinrate,\r\n  StatisticsPastGame\r\n}from '../organisms/index';\r\n\r\nconst StatisticsWrapper = styled.div`\r\n  margin: 30px 0;\r\n  padding:0 40px;\r\n  left: 50%;\r\n  transform: translate(-50%);\r\n  position: absolute;\r\n  min-width: 794px;\r\n  background-color:white;\r\n  border-radius: 9px;\r\n  box-shadow: 5px 5px 16px -2px rgb(175, 175, 175);\r\n`;\r\n\r\ninterface IPastGame {\r\n  record: number;\r\n  date: string;\r\n  success: number;\r\n  level: string;\r\n}\r\n\r\nexport default function Statisticks({ userid }: { userid: string }) {\r\n\r\n  const [gameCountPerLevel, setGameCountPerLevel] = useState<PieData[]>(Array.from({ length: 3 }, (v, i) => ({\r\n    id: `${i}`,\r\n    label: `${i}`,\r\n    value: 0,\r\n    color: ''\r\n  })));\r\n\r\n  const [pastGame, setPastGame] = useState<IPastGame[]>(Array.from({ length: 20 }, (v, i) => ({\r\n    record: 0,\r\n    date: '',\r\n    success: 0,\r\n    level: ''\r\n  })));\r\n\r\n  const [winRate, setWinRate] = useState<number[]>([0, 1, 2]);\r\n  const [best, setBest] = useState<number[]>([1, 2, 3]);\r\n  const [totalGame, setTotalGame] = useState<number>(0);\r\n  const [winCount, setWinCount] = useState<number[]>([]);\r\n\r\n  useEffect(() => {\r\n    axiosApi.get(`/api/game?userid=${userid}`)\r\n      .then((res: Response) => {\r\n\r\n        const { easytotal, normaltotal, hardtotal, easywin, normalwin, hardwin, pastGame } = res.data;\r\n        const { ebest, nbest, hbest } = res.data;\r\n\r\n        setBest(prev => [ebest, nbest, hbest]);\r\n        setPastGame(prev => [...pastGame]);\r\n        setTotalGame(easytotal + normaltotal + hardtotal);\r\n        setGameCountPerLevel(prev => [\r\n          {\r\n            id: 'easy',\r\n            label: 'easy',\r\n            value: easytotal\r\n          },\r\n          {\r\n            id: 'normal',\r\n            label: 'normal',\r\n            value: normaltotal\r\n          },\r\n          {\r\n            id: 'hard',\r\n            label: 'hard',\r\n            value: hardtotal\r\n          }\r\n        ]);\r\n\r\n        setWinCount(prev => [\r\n          easywin, normalwin, hardwin\r\n        ]);\r\n\r\n        setWinRate(prev => [\r\n          Math.floor(easywin * 100 / easytotal),\r\n          Math.floor(normalwin * 100 / normaltotal),\r\n          Math.floor(hardwin * 100 / hardtotal)\r\n        ]);\r\n      })\r\n      .catch(e => { });\r\n\r\n  }, [userid]);\r\n\r\n  return (\r\n    <>\r\n      <StatisticsWrapper>\r\n        <TextWrapper\r\n          width={'100%'}\r\n          textAlign={'center'}\r\n        >\r\n          <HeaderText\r\n            size={'2.0rem'}\r\n            value={userid}\r\n            isColor={false}\r\n          />\r\n        </TextWrapper>\r\n        <StatisticsSummary\r\n          gameCountPerLevel={gameCountPerLevel}\r\n          best={best}\r\n          winCount={winCount}\r\n        />\r\n        <StatisticsTotalGame\r\n          totalGame={totalGame}\r\n          gameCountPerLevel={gameCountPerLevel}\r\n        />\r\n        <StatisticsWinrate\r\n          winRate={winRate}\r\n        />\r\n        <StatisticsPastGame\r\n          pastGame={pastGame}\r\n        />\r\n      </StatisticsWrapper>\r\n    </>\r\n  )\r\n}","import Header from '../Header';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../reducers';\r\nimport React, { useEffect } from 'react';\r\n\r\nimport Statistics from '../page/Statistics';\r\n\r\nexport default function MyPage({ history }: RouteComponentProps) {\r\n\r\n  const { userid, isLogin } = useSelector((state: RootState) => ({\r\n    userid: state.login.id,\r\n    isLogin: state.login.isLogin\r\n  }));\r\n\r\n  // 비로그인시 로그인창으로\r\n  useEffect(() => {\r\n    if (isLogin !== true) {\r\n      history.replace('/signin');\r\n    }\r\n  }, [isLogin, history]);\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        selected='MyPage'\r\n      />\r\n      <Statistics\r\n        userid={userid}\r\n      />\r\n    </>\r\n  )\r\n}","import Header from '../Header';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport React from 'react';\r\nimport Statistics from '../page/Statistics';\r\n\r\ninterface MatchParams{\r\n  userid:string;\r\n}\r\n\r\nexport default function UserPage({ match, location }: RouteComponentProps<MatchParams>) {\r\n\r\n  const userid = match.params.userid;\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        selected='MyPage'\r\n      />\r\n      <Statistics\r\n        userid={userid}\r\n      />\r\n    </>\r\n  )\r\n}","import { RouteComponentProps } from 'react-router-dom';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport MyPage from '../page/Mypage';\r\nimport Userpage from '../page/Userpage';\r\nimport NotFound from '../page/NotFound';\r\n\r\ninterface MatchParams {\r\n  userid: string;\r\n}\r\n\r\nexport default function MyPageRouter({ match }: RouteComponentProps<MatchParams>) {\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route exact path={`${match.url}`} component={MyPage} />\r\n        <Route exact path={`${match.url}/:userid`} component={Userpage} />\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </>\r\n  )\r\n}"],"sourceRoot":""}