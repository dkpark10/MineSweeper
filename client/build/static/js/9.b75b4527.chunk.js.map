{"version":3,"sources":["components/atoms/Page.tsx","components/atoms/Buttons.tsx","components/atoms/MyLink.tsx","components/molecules/TextWrapper.tsx","components/atoms/PostWrapper.tsx","components/atoms/Inputs.tsx","components/organisms/Pagenation.tsx","components/molecules/PageWrapper.tsx","components/organisms/Editor.tsx","components/molecules/PostController.tsx","components/organisms/PostTitleInfo.tsx","modules/DateHandler.ts","components/organisms/PostCardList.tsx","components/page/Bulletin.tsx","components/page/CreatePost.tsx","components/organisms/PostArticle.tsx","components/page/Post.tsx","components/page/PostDelete.tsx","components/route/Community.tsx"],"names":["PageStyle","styled","span","width","theme","border","fontColor","backgroundColor","mainColor","isCurrentPage","PageLink","url","value","bold","to","ButtonStyle","button","height","Button","onClick","children","MyLinkStyle","MyLink","state","search","pathname","TextWrapperStyle","textAlign","TextWrapper","fontSize","isColor","size","PostStyle","div","grid_Template_Columnn","PostWrapper","InputTextStyle","attrs","props","style","type","InputSubmitStyle","Input","placeHolder","onChange","placeholder","PageWrapper","PageNation","totalItemCount","itemCountperPage","currentPage","pageRangeDisplayed","beginPage","Math","floor","tmpEndPage","endPage","calculPage","pageList","Array","from","length","v","i","map","ele","idx","page","display","String","PageBlockStyle","align","PageBlock","toolbarOptions","EditorComponent","contents","setContents","quillRef","useRef","modules","useMemo","toolbar","ref","element","current","React","memo","authorIsMe","postid","PostController","isAuthor","PostTitleInfo","ONEDAY","calculTimeAgo","time","gap","Date","getTime","timeToDate","date","day","getDate","month","getMonth","year","getFullYear","PostCardWrapper","PostCardList","postList","id","author","title","comments","likenum","paddingLeft","BulletinWrapper","BulletinMain","match","location","queryString","parse","useState","setPostList","setTotalItemCount","isLogin","useSelector","login","useEffect","axiosApi","get","then","response","prev","data","result","totalContentSize","res","catch","e","Header","selected","Pagenation","Number","CreatePostWrapper","CreatePost","history","setTitle","replace","onSubmit","post","substring","target","marginBottom","Editor","margin","Theme","PostArticleWrapper","PostArticle","params","setIsAuthor","content","views","setPost","loginedUser","patch","goBack","Post","useLocation","window","scrollTo","ButtonWrapper","SubmitButton","input","background","PostDelete","userid","realAuthor","setRealAuthor","preventDefault","delete","BulletinRouter","exact","path","component","NotFound"],"mappings":"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","file":"static/js/9.b75b4527.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IPageStyle {\r\n  bold: boolean;\r\n  border?: boolean;\r\n  width?: string;\r\n  isCurrentPage?: boolean;\r\n  backgroundColor?: boolean;\r\n};\r\n\r\nexport interface IPage extends IPageStyle {\r\n  url: string;\r\n  value: string;\r\n};\r\n\r\nconst PageStyle = styled.span<IPageStyle>`\r\n  width: ${({ width }) => width};\r\n  border : ${({ theme, border }) => {\r\n    return border === true ? `1px solid ${theme.fontColor}` : 'none'\r\n  }};\r\n  background-color: ${({ theme, backgroundColor }) => {\r\n    return backgroundColor === true ? theme.mainColor : 'none'\r\n  }};\r\n\r\n  cursor:pointer;\r\n  display:inline-block;\r\n\r\n  font-family: 'Tajawal', sans-serif;\r\n  border-radius:5px;\r\n  margin: 0.8rem 0;\r\n  text-align:center;\r\n\r\n  a {\r\n    color:${({ theme, isCurrentPage }) => {\r\n    return isCurrentPage === true ? theme.mainColor : theme.fontColor;\r\n  }};\r\n\r\n    text-decoration: none;\r\n    &:hover{\r\n      color:${({ theme }) => theme.mainColor};\r\n  }};\r\n}\r\n`;\r\n\r\nconst PageLink = ({\r\n  url,\r\n  width,\r\n  border,\r\n  isCurrentPage,\r\n  value,\r\n  bold,\r\n  backgroundColor }: IPage) => {\r\n\r\n  return (\r\n    <>\r\n      <PageStyle\r\n        bold={bold}\r\n        width={width}\r\n        border={border}\r\n        isCurrentPage={isCurrentPage}\r\n        backgroundColor={backgroundColor}\r\n      >\r\n        <Link to={url}>\r\n          {value}\r\n        </Link>\r\n      </PageStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PageLink;","import styled from 'styled-components';\r\n\r\nexport interface IButton {\r\n  width: string;\r\n  height: string;\r\n  backgroundColor?: string;\r\n  fontColor?: string;\r\n  onClick?: React.MouseEventHandler<HTMLButtonElement>,\r\n  border?: boolean;\r\n  children?: any;\r\n}\r\n\r\nexport const ButtonStyle = styled.button<Partial<IButton>>`\r\n  cursor:pointer;\r\n  width: ${({ width }) => width};\r\n  height:${({ height }) => height};\r\n  color:${({ fontColor, theme }) => {\r\n    return fontColor ? fontColor : theme.fontColor\r\n  }};\r\n  background-color: ${({ backgroundColor, theme }) => {\r\n    return backgroundColor ? backgroundColor : theme.mainColor\r\n  }};\r\n  border-radius: 5px;\r\n  border : ${({ border, theme }) => {\r\n    return border === true ? `2px solid ${theme.mainColor}` : 'none';\r\n  }};\r\n  font-family :'Roboto', sans-serif;\r\n`;\r\n\r\nconst SkinismButtonStyle = styled.button<Partial<IButton>>`\r\n  cursor:pointer;\r\n  width: ${({ width }) => width};\r\n  height:${({ height }) => height};\r\n  color:${({ fontColor }) => fontColor};\r\n  background-color: 'none';\r\n  border-radius: 5px;\r\n  border-top: 0.5px solid white;\r\n  border-left: 0.5px solid #eee;\r\n  font-family :'Roboto', sans-serif;\r\n`;\r\n\r\nconst Button = ({\r\n  width,\r\n  height,\r\n  backgroundColor,\r\n  fontColor,\r\n  border,\r\n  onClick,\r\n  children }: IButton) => {\r\n\r\n  return (\r\n    <>\r\n      <ButtonStyle\r\n        width={width}\r\n        height={height}\r\n        backgroundColor={backgroundColor}\r\n        onClick={onClick}\r\n        fontColor={fontColor}\r\n        border={border}\r\n      >{children}\r\n      </ButtonStyle >\r\n    </>\r\n  )\r\n}\r\n\r\nconst SkinismButton = ({\r\n  width,\r\n  height,\r\n  fontColor,\r\n  onClick,\r\n  children }: IButton) => {\r\n\r\n  return (\r\n    <>\r\n      <SkinismButtonStyle\r\n        width={width}\r\n        height={height}\r\n        onClick={onClick}\r\n        fontColor={fontColor}\r\n      >{children}\r\n      </SkinismButtonStyle >\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Button, SkinismButton };\r\n","import { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\ninterface IMyLink {\r\n  url: string;\r\n  state?: any;\r\n  search?: string;\r\n  children?: any;\r\n}\r\n\r\n// 이 컴포넌트는\r\n// 링크안에 컴포넌트 집어넣고 싶을 때\r\n// 주로 텍스트에서 링크를 클릭할테니\r\n// 텍스트용 !!\r\nconst MyLinkStyle = styled.span`\r\n  margin:0 0.2rem;\r\n  a {\r\n    text-decoration:none;\r\n  }\r\n`;\r\n\r\nconst MyLink = ({ url, state, search, children }: IMyLink) => {\r\n\r\n  return (\r\n    <>\r\n      <MyLinkStyle>\r\n        <Link to={{\r\n          pathname: url,\r\n          state: state,\r\n          search: search\r\n        }}\r\n        >\r\n          {children}\r\n        </Link>\r\n      </MyLinkStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyLink;","import styled from 'styled-components';\r\nimport { InlineText } from '../atoms/Text';\r\n\r\ninterface ITextWrapper {\r\n  width?: string;\r\n  fontSize?: string;\r\n  value?: string;\r\n  isColor?: boolean;\r\n  paddingLeft?: string;\r\n  textAlign?: string;\r\n  bold?:boolean;\r\n  children?: any;\r\n}\r\n\r\n// const TextWrapperStyle = styled.span<ITextWrapper>`\r\n//   display: flex;\r\n//   justify-content: ${({ justifyContent }) => justifyContent};\r\n//   align-items: center;\r\n//   width: ${({ width }) => width};\r\n//   padding-left: ${({ paddingLeft }) => paddingLeft};\r\n// `;\r\n\r\nconst TextWrapperStyle = styled.span<ITextWrapper>`\r\n  display: inline-block;\r\n  width: ${({ width }) => width};\r\n  text-align: ${({ textAlign }) => textAlign};\r\n  position:relative;\r\n`;\r\n\r\nconst TextWrapper = ({\r\n  width = 'none',\r\n  fontSize,\r\n  value,\r\n  isColor,\r\n  textAlign,\r\n  bold,\r\n  children }: ITextWrapper) => {\r\n\r\n  return (\r\n    <>\r\n      <TextWrapperStyle\r\n        width={width}\r\n        textAlign={textAlign}\r\n      >\r\n        <InlineText\r\n          size={fontSize}\r\n          value={value}\r\n          isColor={isColor}\r\n          bold={bold}\r\n        />\r\n        {children}\r\n      </TextWrapperStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TextWrapper;","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\ninterface IPostWrapper {\r\n  children: any;\r\n  backgroundColor: string;\r\n  grid_Template_Columnn: string;\r\n}\r\n\r\nexport const PostStyle = styled.div<IPostWrapper>`\r\n  display: grid;\r\n  position: relative;\r\n  margin : 9px 0;\r\n  min-height: 2.5rem;\r\n  border-radius: 7px;\r\n  background-color: ${({ backgroundColor }) => backgroundColor};\r\n  grid-template-columns: ${({ grid_Template_Columnn }) => grid_Template_Columnn};\r\n  box-shadow: 5px 5px 8px 0px rgb(175, 175, 175);\r\n  border-top: 0.5px solid white;\r\n  border-left: 0.5px solid #eee;\r\n  padding-left: 1.0rem;\r\n  align-items: center;\r\n`;\r\n\r\n\r\nconst PostWrapper = ({ children, backgroundColor, grid_Template_Columnn }: IPostWrapper) => {\r\n\r\n  return (\r\n    <>\r\n      <PostStyle\r\n        backgroundColor={backgroundColor}\r\n        grid_Template_Columnn={grid_Template_Columnn}\r\n      >\r\n        {children}\r\n      </PostStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PostWrapper;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface IInputStyle {\r\n  type: string;\r\n  value: string;\r\n  width: string;\r\n  height: string;\r\n  backgroundColor: string;\r\n  placeHolder?: string;\r\n  onChange?: React.Dispatch<React.SetStateAction<any>>;\r\n  border?: string;\r\n}\r\n\r\nconst InputTextStyle = styled('input').attrs((props: IInputStyle) => ({\r\n  style: {\r\n    type: 'text',\r\n    value: props.value\r\n  }\r\n})) <IInputStyle>`\r\n  width: ${({ width }) => width};\r\n  height:${({ height }) => height};\r\n  background-color: ${({ backgroundColor }) => backgroundColor};\r\n  border:none;\r\n  margin-right: 0.7rem;\r\n  font-size:1.0rem;\r\n  outline: 1px solid ${({ theme }) => theme.mainColor};\r\n  border-radius: 8px;\r\n\r\n  &:focus {\r\n    outline: 2px solid ${({ theme }) => theme.mainColor};\r\n  }\r\n`;\r\n\r\nconst InputSubmitStyle = styled('input').attrs((props: IInputStyle) => ({\r\n  style: {\r\n    type: 'submit',\r\n    value: props.value\r\n  }\r\n})) <IInputStyle>`\r\n  width: ${({ width }) => width};\r\n  height:${({ height }) => height};\r\n  background-color: ${({ backgroundColor }) => backgroundColor};\r\n  border:none;\r\n  color:white;\r\n  font-family: 'Roboto', sans-serif;\r\n  border-radius:7px;\r\n  font-size: 0.9rem;\r\n\r\n  &:hover{\r\n    cursor:pointer;\r\n    background: linear-gradient(70deg,#1033e3, #f74bf7);\r\n  }\r\n`;\r\n\r\nconst Input = ({ type, value, width, height, backgroundColor, placeHolder = '', onChange }: Partial<IInputStyle>) => {\r\n\r\n  switch (type) {\r\n    case 'text':\r\n      return (\r\n        <>\r\n          <InputTextStyle\r\n            type={type}\r\n            value={value}\r\n            width={width}\r\n            height={height}\r\n            backgroundColor={backgroundColor}\r\n            onChange={onChange}\r\n            placeholder={placeHolder}\r\n          />\r\n        </>\r\n      )\r\n    case 'submit':\r\n      return (\r\n        <>\r\n          <InputSubmitStyle\r\n            type={type}\r\n            value={value}\r\n            width={width}\r\n            height={height}\r\n            backgroundColor={backgroundColor}\r\n            onChange={onChange}\r\n            placeholder={placeHolder}\r\n          />\r\n        </>\r\n      )\r\n    default: break;\r\n  }\r\n}\r\n\r\nexport default Input;","import PageLink from '../atoms/Page';\r\nimport styled from 'styled-components';\r\n\r\nexport interface PageProps {\r\n  totalItemCount: number;\r\n  itemCountperPage?: number;\r\n  currentPage: number;\r\n  pageRangeDisplayed?: number;\r\n  url: string;\r\n}\r\n\r\nconst PageWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  width: 524px;\r\n  left:50%;\r\n  margin : 1.4rem 0;\r\n  transform: translateX(-50%);\r\n  cursor: pointer;\r\n  text-align: center;\r\n  font-family: 'Tajawal', sans-serif;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst calculPage = ({\r\n  totalItemCount,\r\n  itemCountperPage,\r\n  currentPage,\r\n  pageRangeDisplayed\r\n}: Partial<PageProps>) => {\r\n\r\n  let beginPage = currentPage - Math.floor(pageRangeDisplayed / 2);\r\n\r\n  if (currentPage - Math.floor(pageRangeDisplayed / 2) <= 0) {\r\n    beginPage = 1;\r\n  }\r\n\r\n  const tmpEndPage = Math.floor(totalItemCount / itemCountperPage);\r\n  const endPage = totalItemCount % itemCountperPage === 0 ? tmpEndPage : tmpEndPage + 1;\r\n\r\n  if (currentPage + Math.floor(pageRangeDisplayed / 2) > endPage) {\r\n    beginPage = endPage - pageRangeDisplayed;\r\n    if (beginPage <= 0) {\r\n      beginPage = 1;\r\n    }\r\n  }\r\n\r\n  return { beginPage, endPage };\r\n}\r\n\r\nconst PageNation = ({\r\n  totalItemCount,\r\n  itemCountperPage = 20,\r\n  currentPage,\r\n  pageRangeDisplayed = 9,\r\n  url\r\n}: PageProps) => {\r\n\r\n  const { beginPage, endPage } = calculPage({\r\n    totalItemCount,\r\n    itemCountperPage,\r\n    currentPage,\r\n    pageRangeDisplayed\r\n  });\r\n\r\n  const pageList: JSX.Element[] = Array.from({ length: pageRangeDisplayed }, (v, i) => i)\r\n    .map((ele, idx) => {\r\n\r\n      const page = beginPage + ele;\r\n      if (page > endPage) {\r\n        return <span key={idx} style={{ display: 'none' }} />\r\n      }\r\n\r\n      return (\r\n        <PageLink\r\n          key={idx}\r\n          url={`${url}?page=${page}`}\r\n          isCurrentPage={page === currentPage}\r\n          value={String(page)}\r\n          bold={false}\r\n        />\r\n      )\r\n    })\r\n    \r\n  return (\r\n    <>\r\n      <PageWrapper>\r\n        <PageLink\r\n          url={`${url}?page=${currentPage - pageRangeDisplayed <= 0 ?\r\n            1 :\r\n            currentPage - pageRangeDisplayed}`}\r\n          isCurrentPage={false}\r\n          value={'<<'}\r\n          bold={true}\r\n        />\r\n        {pageList}\r\n        <PageLink\r\n          url={`${url}?page=${currentPage + pageRangeDisplayed > endPage\r\n            ? endPage\r\n            : currentPage + pageRangeDisplayed}`}\r\n          isCurrentPage={false}\r\n          value={'>>'}\r\n          bold={true}\r\n        />\r\n      </PageWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PageNation;","import PageLink, { IPage } from '../atoms/Page';\r\nimport styled from 'styled-components';\r\n\r\nexport interface IPageBlock extends IPage {\r\n  align: string;\r\n}\r\n\r\nconst PageBlockStyle = styled.div<Partial<IPageBlock>>`\r\n  text-align:${({align}) => align};\r\n`;\r\n\r\nconst PageBlock = ({ align, url, width, value, bold, border }: IPageBlock) => {\r\n\r\n  return (\r\n    <>\r\n      <PageBlockStyle\r\n        align={align}\r\n      >\r\n        <PageLink\r\n          url={`${url}`}\r\n          width={width}\r\n          value={value}\r\n          bold={bold}\r\n          border={border}\r\n        />\r\n      </PageBlockStyle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PageBlock;","import React, { useRef, useMemo } from \"react\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\n\r\nvar toolbarOptions = [\r\n\r\n  ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n  ['blockquote', 'code-block'],\r\n\r\n  [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n  [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript\r\n  [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent\r\n  [{ 'direction': 'rtl' }],                         // text direction\r\n  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n  [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\r\n  [{ 'font': [] }],\r\n  [{ 'align': [] }],\r\n  ['clean']                                         // remove formatting button\r\n];\r\n\r\ntype StateCallback = React.Dispatch<React.SetStateAction<any>>;\r\n\r\ninterface IEditorProps {\r\n  contents: string;\r\n  setContents: StateCallback;\r\n}\r\n\r\nconst EditorComponent = ({ contents, setContents }: IEditorProps) => {\r\n\r\n  const quillRef = useRef<ReactQuill>();\r\n\r\n  const modules = useMemo(() => ({\r\n    toolbar: toolbarOptions\r\n  }), []);\r\n\r\n  return (\r\n    <>\r\n      <ReactQuill\r\n        ref={element => {\r\n          if (element !== null)\r\n            quillRef.current = element;\r\n        }}\r\n        value={contents}\r\n        onChange={setContents}\r\n        modules={modules}\r\n        theme=\"snow\"\r\n        style={{\r\n          height: '87%',\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n};\r\n\r\nexport default React.memo(EditorComponent);","import React from 'react';\r\nimport { InlineText } from '../atoms/Text';\r\nimport MyLink from '../atoms/MyLink';\r\n\r\ninterface IPostController {\r\n  isAuthor: boolean;\r\n  postid: number;\r\n}\r\n\r\nconst authorIsMe = ({ postid }: Partial<IPostController>) => {\r\n\r\n  return (\r\n    <>\r\n      <MyLink\r\n        url={'/community/update'}\r\n      >\r\n        <InlineText\r\n          size={'1.4rem'}\r\n          isColor={false}\r\n          value={'↺'}\r\n        />\r\n      </MyLink>\r\n      <MyLink\r\n        url={'/community/delete'}\r\n        search={`?postid=${postid}`}\r\n      >\r\n        <InlineText\r\n          size={'1.4rem'}\r\n          isColor={false}\r\n          value={'ⅹ'}\r\n        />\r\n      </MyLink>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function PostController({ isAuthor, postid }: IPostController) {\r\n\r\n  return (\r\n    <>\r\n      <MyLink\r\n        url={'/community'}\r\n        search={'?page=1'}\r\n      >\r\n        <InlineText\r\n          size={'1.4rem'}\r\n          isColor={false}\r\n          value={'≡'}\r\n        />\r\n      </MyLink>\r\n      {isAuthor && authorIsMe({ postid })}\r\n    </>\r\n  )\r\n}","import TextWrapper from '../molecules/TextWrapper';\r\nimport PostWrapper from '../atoms/PostWrapper';\r\n\r\ntype TpostTitleTuple = [string, number];\r\n\r\nexport default function PostTitleInfo() {\r\n\r\n  const postTitleInfo: TpostTitleTuple[] = [\r\n    ['Title', 1],\r\n    ['Author', 2],\r\n    ['Time', 3],\r\n    ['Like', 4]\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <PostWrapper\r\n        backgroundColor={'none'}\r\n        grid_Template_Columnn={'69% 11% 11% 9%'}\r\n      >\r\n        {postTitleInfo.map(ele => {\r\n\r\n          const [value, idx] = ele;\r\n\r\n          return (\r\n            <TextWrapper\r\n              key={idx}\r\n              width={'none'}\r\n              textAlign={'center'}\r\n              fontSize={'1.1rem'}\r\n              value={value}\r\n              isColor={false}\r\n            />\r\n          )\r\n        })}\r\n      </PostWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\n","const ONEMINUTE = 60 as const;\r\nconst ONEHOUR = 3600 as const;\r\nconst ONEDAY = 86400 as const;\r\nconst ONEMONTH = 30 * ONEDAY;\r\n\r\n// 얼마나 지났나??\r\nconst calculTimeAgo = (time: number): string => {\r\n\r\n  const currentTime = Math.floor(new Date().getTime() / 1000);\r\n  const gap = currentTime - time;\r\n\r\n  if (gap < ONEMINUTE) {\r\n    return `${gap} sec ago`\r\n  }\r\n  else if (gap < ONEHOUR) {\r\n    return `${Math.floor(gap / ONEMINUTE)} minute ago`\r\n  }\r\n  else if (gap < ONEDAY) {\r\n    return `${Math.floor(gap / ONEHOUR)} hour ago`\r\n  }\r\n  else if (gap < ONEMONTH) {\r\n    return `${Math.floor(gap / ONEDAY)} day ago`\r\n  }\r\n\r\n  return timeToDate(time * 1000);\r\n}\r\n\r\n// 날짜를 시간으로 변환\r\nconst timeToDate = (time: number) => {\r\n\r\n  const date = new Date(time);\r\n  const day = date.getDate();\r\n  const month = date.getMonth();\r\n  const year = date.getFullYear();\r\n\r\n  return `${year}/${month}/${day}`;\r\n}\r\n\r\nexport {calculTimeAgo, timeToDate};","import MyLink from '../atoms/MyLink';\r\nimport { InlineText } from '../atoms/Text';\r\nimport { PostStyle } from '../atoms/PostWrapper';\r\nimport TextWrapper from '../molecules/TextWrapper';\r\nimport { calculTimeAgo } from '../../modules/DateHandler';\r\nimport { IPost } from '../organisms/PostArticle';\r\nimport styled from 'styled-components';\r\n\r\ninterface IPostCardList {\r\n  postList: IPost[];\r\n  totalItemCount: number;\r\n  url: string;\r\n  page: string;\r\n}\r\n\r\nconst PostCardWrapper = styled(PostStyle)`\r\n  &:hover {\r\n    border: 2px solid ${({ theme }) => theme.mainColor};\r\n  }\r\n`;\r\n\r\nexport default function PostCardList({ postList, totalItemCount, url, page }: IPostCardList) {\r\n\r\n  return (\r\n    <>\r\n      {postList.map((ele) => {\r\n\r\n        const { id, author, title, comments, likenum, time } = ele;\r\n\r\n        return (\r\n          <PostCardWrapper\r\n            key={id}\r\n            backgroundColor={'white'}\r\n            grid_Template_Columnn={'69% 11% 11% 9%'}\r\n          >\r\n            {/* 게시글 아래 게시글 리스트를 위한 파라미터 */}\r\n            <MyLink\r\n              url={`${url}/${id}`}\r\n              state={{\r\n                totalItemCount,\r\n                postList,\r\n                page\r\n              }}\r\n            >\r\n              <TextWrapper\r\n                fontSize={'1.2rem'}\r\n                value={title}\r\n                isColor={false}\r\n                paddingLeft={'1.1rem'}\r\n              >\r\n                <InlineText\r\n                  size={'0.8rem'}\r\n                  value={`[${comments}]`}\r\n                  isColor={true}\r\n                  bold={true}\r\n                />\r\n              </TextWrapper>\r\n            </MyLink>\r\n            <TextWrapper\r\n              textAlign={'center'}\r\n              fontSize={'0.85rem'}\r\n              value={author}\r\n              isColor={false}\r\n            />\r\n            <TextWrapper\r\n              textAlign={'center'}\r\n              fontSize={'0.85rem'}\r\n              value={calculTimeAgo(time)}\r\n              isColor={false}\r\n            />\r\n            <TextWrapper\r\n              textAlign={'center'}\r\n              fontSize={'1.05rem'}\r\n              value={String(likenum)}\r\n              isColor={true}\r\n            />\r\n          </PostCardWrapper>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}","import Header from '../Header';\r\nimport Pagenation from '../organisms/Pagenation';\r\nimport PostTitleInfo from '../organisms/PostTitleInfo';\r\nimport PageBlock from '../molecules/PageWrapper';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../reducers';\r\nimport React, { useEffect, useState } from 'react';\r\nimport axiosApi, { Response } from '../../modules/API';\r\nimport { IPost } from '../organisms/PostArticle';\r\nimport PostCardList from '../organisms/PostCardList';\r\n\r\ninterface MatchParams {\r\n  page: string;\r\n  postid: string;\r\n}\r\n\r\nconst BulletinWrapper = styled.div`\r\n  position: relative;\r\n  width: 84%;\r\n  max-width: 794px;\r\n  min-width: 573px;\r\n  left:50%;\r\n  transform: translateX(-50%);\r\n  word-break:break-all;\r\n  margin:2.0rem 0;\r\n`;\r\n\r\nexport default function BulletinMain({ match, location }: RouteComponentProps<MatchParams>) {\r\n\r\n  const { page } = queryString.parse(location.search);\r\n  const [postList, setPostList] = useState<IPost[]>([]);\r\n  const [totalItemCount, setTotalItemCount] = useState<number>(1);\r\n\r\n  const { isLogin } = useSelector((state: RootState) => ({\r\n    isLogin: state.login.isLogin\r\n  }));\r\n\r\n  useEffect(() => {\r\n\r\n    axiosApi.get(`/api/posts?page=${page}`)\r\n      .then((response: Response) => {\r\n        setPostList(prev => ([\r\n          ...response.data.result\r\n        ]))\r\n        return response.data.totalContentSize;\r\n      })\r\n      .then((res: number) => setTotalItemCount(res))\r\n      .catch(e => { });\r\n  }, [page]);\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        selected='Community'\r\n      />\r\n      <BulletinWrapper>\r\n        {/* <SearchInput\r\n          width={'19.2rem'}\r\n          height={'1.6rem'}\r\n          backgroundColor={'white'}\r\n        /> */}\r\n        {isLogin &&\r\n          <PageBlock\r\n            align={'right'}\r\n            url={`${match.url}/create`}\r\n            width={'4.2rem'}\r\n            value={'Create'}\r\n            bold={true}\r\n            border={true}\r\n          />}\r\n        <PostTitleInfo />\r\n        <PostCardList\r\n          postList={postList}\r\n          totalItemCount={totalItemCount}\r\n          url={match.url}\r\n          page={page as string}\r\n        />\r\n      </BulletinWrapper>\r\n      <Pagenation\r\n        totalItemCount={totalItemCount}\r\n        currentPage={Number(page)}\r\n        url={'/community'}\r\n      />\r\n    </>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Header from '../Header';\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport Input from '../atoms/Inputs';\r\nimport Editor from '../organisms/Editor';\r\nimport styled from 'styled-components';\r\nimport Theme from \"../../styles/Theme\";\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport axiosApi, { Response } from '../../modules/API';\r\nimport { RootState } from '../../reducers';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst CreatePostWrapper = styled.div`\r\n  position: absolute;\r\n  width: 84%;\r\n  max-width: 824px;\r\n  left:50%;\r\n  transform: translateX(-50%);\r\n  margin: 2.0rem 0;\r\n  background-color:white;\r\n  border-radius:7px;\r\n  padding: 2.0rem;\r\n  height: 724px;\r\n`;\r\n\r\nexport default function CreatePost({ history }: RouteComponentProps) {\r\n\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const [contents, setContents] = useState<string>(\"\");\r\n\r\n  const { isLogin, author } = useSelector((state: RootState) => ({\r\n    isLogin: state.login.isLogin,\r\n    author: state.login.id,\r\n  }));\r\n\r\n  // 비로그인시 로그인창으로\r\n  useEffect(() => {\r\n    if (isLogin !== true) {\r\n      history.replace('/signin');\r\n    }\r\n  }, [isLogin, history]);\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if(e.target.value.length <= 49){\r\n      setTitle(e.target.value);\r\n    }\r\n  }\r\n\r\n  const writeSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n\r\n    if (title.length === 0)\r\n      return;\r\n\r\n    axiosApi.post(`/api/auth/posts`, {\r\n      \"author\": author,\r\n      \"title\": title,\r\n      \"contents\": contents.substring(0, 2500)\r\n    })\r\n      .then((res: Response) => {\r\n      })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        selected='Community'\r\n      />\r\n      <CreatePostWrapper>\r\n        <form onSubmit={writeSubmit}>\r\n          <Input\r\n            type={'text'}\r\n            value={title}\r\n            width={'100%'}\r\n            height={'2.2rem'}\r\n            backgroundColor={'white'}\r\n            placeHolder={'Enter a Title'}\r\n            onChange={onChange}\r\n          />\r\n          <hr style={{ marginBottom: '2.0rem' }} />\r\n          <div style={{\r\n            height: '524px'\r\n          }}>\r\n            <Editor\r\n              contents={contents}\r\n              setContents={setContents}\r\n            />\r\n          </div>\r\n          <div style={{\r\n            textAlign: 'right',\r\n            margin: '0.8rem 0'\r\n          }}>\r\n            <Input\r\n              type={'submit'}\r\n              value={'Write'}\r\n              width={'4.8rem'}\r\n              height={'1.8rem'}\r\n              backgroundColor={Theme.mainColor}\r\n            />\r\n          </div>\r\n        </form>\r\n      </CreatePostWrapper>\r\n    </>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport axiosApi, { Response } from '../../modules/API';\r\nimport { HeaderText } from '../atoms/Text';\r\nimport TextWrapper from '../molecules/TextWrapper';\r\nimport { calculTimeAgo } from '../../modules/DateHandler';\r\nimport PostController from '../molecules/PostController';\r\nimport parse from 'html-react-parser';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../reducers';\r\n\r\nexport interface IPost {\r\n  id: number;\r\n  author: string;\r\n  title: string;\r\n  content: string;\r\n  comments: number;\r\n  likenum: number;\r\n  time: number;\r\n  views: number;\r\n}\r\n\r\ninterface MatchParams {\r\n  postid: string;\r\n}\r\n\r\nconst PostArticleWrapper = styled.div`\r\n  width:100%;\r\n  min-height: 760px;\r\n  background-color:white;\r\n  border-radius:7px;\r\n  padding: 0.7rem 2.0rem;\r\n  word-break:break-all;\r\n`;\r\n\r\nexport default function PostArticle({ match, history }: RouteComponentProps<MatchParams>) {\r\n\r\n  const postid = match.params.postid;\r\n  const [isAuthor, setIsAuthor] = useState<boolean>(false);\r\n  const [post, setPost] = useState<IPost>({\r\n    id: -1,\r\n    author: '',\r\n    title: '',\r\n    content: '',\r\n    comments: -1,\r\n    likenum: -1,\r\n    time: 0,\r\n    views: 0\r\n  });\r\n\r\n  const { loginedUser } = useSelector((state: RootState) => ({\r\n    loginedUser: state.login.id\r\n  }));\r\n\r\n  useEffect(() => {\r\n\r\n    axiosApi.patch(`/api/posts/${postid}?column=views`)\r\n      .catch(e => { });\r\n\r\n    axiosApi.get(`/api/posts/${postid}`)\r\n      .then((response: Response) => {\r\n        setPost(prev => ({\r\n          ...response.data\r\n        }));\r\n        return response.data.author;\r\n      })\r\n      .then((author: string) => {\r\n        setIsAuthor(author === loginedUser);\r\n      })\r\n      .catch(e => history.goBack());\r\n  }, [postid, history, loginedUser]);\r\n\r\n  return (\r\n    <>\r\n      <PostArticleWrapper>\r\n        <HeaderText\r\n          size={'2.2rem'}\r\n          value={post.title}\r\n          isColor={false}\r\n        />\r\n        <TextWrapper\r\n          width={'100%'}\r\n          fontSize={'0.9rem'}\r\n          value={`Posted by ${post.author}`}\r\n        />\r\n        <TextWrapper\r\n          width={'50%'}\r\n          fontSize={'0.9rem'}\r\n          value={`${calculTimeAgo(post.time)}`}\r\n        />\r\n        <TextWrapper\r\n          width={'50%'}\r\n          fontSize={'0.9rem'}\r\n          value={`views: ${String(post.views)}`}\r\n          textAlign={'right'}\r\n        />\r\n        <hr style={{ width: '100%', margin: '0.8rem 0' }} />\r\n        <div style={{ margin: '1.5rem 0', height: '30.0rem' }}>\r\n          {parse(post.content)}\r\n        </div>\r\n        <hr style={{ width: '100%', margin: '0.8rem 0' }} />\r\n        <TextWrapper\r\n          width={'20%'}\r\n          textAlign={'left'}\r\n        >\r\n          <PostController \r\n            isAuthor={isAuthor}\r\n            postid={post.id}\r\n          />\r\n        </TextWrapper>\r\n      </PostArticleWrapper>\r\n    </>\r\n  )\r\n}","import React, { useEffect } from 'react';\r\nimport PostTitleInfo from '../organisms/PostTitleInfo';\r\nimport Header from '../Header';\r\nimport { RouteComponentProps, useLocation } from 'react-router-dom';\r\nimport PostArticle from '../organisms/PostArticle';\r\nimport styled from 'styled-components';\r\nimport PostCardList from '../organisms/PostCardList';\r\nimport Pagenation from '../organisms/Pagenation';\r\n\r\ninterface MatchParams {\r\n  postid: string;\r\n}\r\n\r\ninterface State {\r\n  postList: any;\r\n  totalItemCount: number;\r\n  page: string;\r\n}\r\n\r\nconst PostWrapper = styled.div`\r\n  position: absolute;\r\n  width: 84%;\r\n  height:100%;\r\n  max-width: 724px;\r\n  min-width: 573px;\r\n  left:50%;\r\n  transform: translateX(-50%);\r\n  margin: 2.0rem 0;\r\n  word-break:break-all;\r\n`;\r\n\r\nexport default function Post({ match, history, location }: RouteComponentProps<MatchParams>) {\r\n\r\n  const { state } = useLocation<State>();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [state]);\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        selected='Community'\r\n      />\r\n      <PostWrapper>\r\n        <PostArticle\r\n          match={match}\r\n          history={history}\r\n          location={location}\r\n        />\r\n        <PostTitleInfo />\r\n        <PostCardList\r\n          postList={state.postList}\r\n          totalItemCount={state.totalItemCount}\r\n          url={'/community'}\r\n          page={state.page}\r\n        />\r\n        <Pagenation\r\n          totalItemCount={state.totalItemCount}\r\n          currentPage={Number(state.page)}\r\n          url={'/community'}\r\n        />\r\n      </PostWrapper>\r\n    </>\r\n  )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport Header from '../Header';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport queryString from 'query-string';\r\nimport axiosApi, { Response } from '../../modules/API';\r\nimport { RootState } from '../../reducers';\r\nimport { useSelector } from 'react-redux';\r\nimport TextWrapper from '../molecules/TextWrapper';\r\nimport { Button } from '../atoms/Buttons';\r\n\r\nconst PostWrapper = styled.div`\r\n  padding:20px;\r\n  top: 50%;\r\n  left: 50%;\r\n  border-radius:5px;\r\n  transform: translate(-50%, -50%);\r\n  position: absolute;\r\n  max-width: 500px;\r\n  background-color:white;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display:flex;\r\n  justify-content:center;\r\n  margin: 1.0rem 0;\r\n`;\r\n\r\ninterface ISubmitButton {\r\n  background: boolean;\r\n  value: string;\r\n}\r\n\r\nconst SubmitButton = styled.input.attrs(({ value }: ISubmitButton) => ({\r\n  type: \"submit\",\r\n  value: value\r\n})) <ISubmitButton>`\r\n\r\n  background-color: ${({ theme, background }) => {\r\n    return background === true ? theme.mainColor : 'white'\r\n  }};\r\n\r\n  color: ${({ theme, background }) => {\r\n    return background === true ? 'white' : theme.mainColor;\r\n  }};\r\n\r\n  display: inline;\r\n  cursor:pointer;\r\n  box-shadow: 5px 5px 16px -2px rgb(175, 175, 175);\r\n  width:35%;\r\n  height:33px;\r\n  border-radius: 7px;\r\n  font-family: 'Roboto', sans-serif;\r\n  border: 2px solid ${({ theme }) => theme.mainColor};\r\n  margin: 0.4rem 0.6rem;\r\n`;\r\n\r\ninterface MatchParams {\r\n  postid: string;\r\n}\r\n\r\nexport default function PostDelete({ history, location }: RouteComponentProps<MatchParams>) {\r\n\r\n  const { postid } = queryString.parse(location.search);\r\n  const { isLogin, userid } = useSelector((state: RootState) => ({\r\n    isLogin: state.login.isLogin,\r\n    userid: state.login.id\r\n  }));\r\n\r\n  const [realAuthor, setRealAuthor] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (isLogin !== true) {\r\n      history.replace('/signin');\r\n    }\r\n\r\n    axiosApi.get(`/api/posts/${postid}`)\r\n      .then((res: Response) => {\r\n\r\n        if (res.data.author === userid) {\r\n          setRealAuthor(true);\r\n        } else {\r\n          history.goBack();\r\n        }\r\n      })\r\n\r\n  }, [isLogin, history, postid, userid]);\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n\r\n    e.preventDefault();\r\n    if (isLogin !== true) {\r\n      return;\r\n    }\r\n\r\n    axiosApi.delete(`/api/auth/posts?postid=${postid}`)\r\n      .then((res: Response) => {\r\n        history.replace('/community?page=1');\r\n      })\r\n      .catch(() => {})\r\n  }\r\n\r\n  const deleteCancle = () => {\r\n    history.replace('/community?page=1');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        selected='Community'\r\n      />\r\n      <PostWrapper>\r\n        <form onSubmit={onSubmit}>\r\n          <TextWrapper\r\n            fontSize={'1.6rem'}\r\n            value={'Are you sure you want to delete this post?'}\r\n            textAlign={'center'}\r\n          >\r\n          </TextWrapper>\r\n          <ButtonWrapper>\r\n            <div style={{ width: '200px', textAlign: 'center' }}>\r\n              {realAuthor && <SubmitButton\r\n                background={true}\r\n                value={'Yes'}\r\n              />}\r\n              <Button\r\n                width={'35%'}\r\n                height={'33px'}\r\n                backgroundColor={'white'}\r\n                border={true}\r\n                onClick={deleteCancle}\r\n              >\r\n                No\r\n              </Button>\r\n            </div>\r\n          </ButtonWrapper>\r\n        </form>\r\n      </PostWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\n","import { RouteComponentProps } from 'react-router-dom';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport BulletinMain from '../page/Bulletin';\r\nimport CreatePost from '../page/CreatePost';\r\nimport Post from '../page/Post';\r\nimport PostDelete from '../page/PostDelete';\r\n\r\nimport NotFound from '../page/NotFound';\r\n\r\ninterface MatchParams {\r\n  page: string;\r\n  postid: string;\r\n}\r\n\r\nexport default function BulletinRouter({ match }: RouteComponentProps<MatchParams>) {\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route exact path={`${match.url}`} component={BulletinMain} />\r\n        <Route path={`${match.url}/create`} component={CreatePost} />\r\n        <Route path={`${match.url}/delete`} component={PostDelete} />\r\n        <Route path={`${match.url}/:postid`} component={Post} />\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </>\r\n  )\r\n}"],"sourceRoot":""}