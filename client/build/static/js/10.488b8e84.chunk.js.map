{"version":3,"sources":["components/SignIn.tsx"],"names":["titleStyle","color","textAlign","marginBottom","SignIn","history","dispatch","useDispatch","isLogin","useSelector","state","login","useEffect","replace","msg","id","pwd","useState","failMsg","setFailMsg","value","invalid","inputs","setInputs","onChange","e","target","name","length","inputList","map","element","idx","placeholder","inputType","className","type","inputLength","onReset","inputName","to","style","onSubmit","preventDefault","Object","entries","filter","val","axiosApi","post","then","response","result","accessToken","loginInfo","axios","defaults","headers","common","setLogin","goBack","catch","marginTop"],"mappings":"uPAUMA,EAAa,CACjBC,MAAO,UACPC,UAAW,SACXC,aAAc,QAsJDC,UAzIA,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,QAEVC,EAAWC,cAETC,EAAYC,aAAY,SAACC,GAAD,MAAuB,CACrDF,QAASE,EAAMC,MAAMH,YADfA,QAIRI,qBAAU,YACQ,IAAZJ,GACFH,EAAQQ,QAAQ,OAEjB,CAACL,EAASH,IAEb,IAAMS,EAAM,CACVC,GAAI,6BACJC,IAAK,yCAGP,EAA8BC,mBAAiB,IAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAoB,CAC9CF,GAAI,CAAEK,MAAO,GAAIC,SAAS,GAC1BL,IAAK,CAAEI,MAAO,GAAIC,SAAS,KAF7B,mBAAOC,EAAP,KAAeC,EAAf,KA2CMC,EAAW,SAACC,GAChB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMP,EAAd,EAAcA,MACdG,EAAU,2BACLD,GADI,kBAENK,EAAO,CACNP,MAAOA,EACPC,QAASD,EAAMQ,QAAU,OAiBzBC,EAA2B,CAC/B,CAAC,KAAM,MAAO,CAAC,MAAO,aACrBC,KAAI,SAACC,EAASC,GAEb,kBAA4BD,EAA5B,GAAOJ,EAAP,KAAaM,EAAb,KACMC,EAA6B,QAATP,EAAiB,WAAa,OAExD,OACE,sBAAeQ,UAAU,kBAAzB,UACE,uBACEC,KAAMF,EACNP,KAAMA,EACNM,YAAaA,EACbT,SAAUA,EACVJ,MAAOE,EAAOK,GAAMP,QAEtB,cAAC,IAAD,CACEiB,YAAaf,EAAOK,GAAMP,MAAMQ,OAAS,EACzCD,KAAMA,EACNW,QAAS,kBA9BFC,EA8BgBZ,OA7B/BJ,EAAU,2BACLD,GADI,kBAENiB,EAAY,CACXnB,MAAO,GACPC,SAAS,MALC,IAACkB,KAgCRjB,EAAOK,GAAMN,SACZ,oBAAIc,UAAU,eAAd,SAA8BrB,EAAIa,OAd5BK,MAoBhB,OACE,mCACE,qBAAKG,UAAU,kBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAMK,GAAG,IAAT,SACE,oBAAIC,MAAOzC,EAAX,4BAEF,uBAAM0C,SAhGS,SAACjB,GAItBA,EAAEkB,iBAGcC,OAAOC,QAAQvB,GAAQwB,QAAO,mCAAOC,GAAP,kBAAgBA,EAAI1B,SAAW0B,EAAI3B,MAAMQ,QAAU,KACrFA,OAAS,GAGrBoB,IAASC,KAAT,aAA4B,CAC1B,GAAM3B,EAAOP,GAAGK,MAChB,IAAOE,EAAON,IAAII,QAEjB8B,MAAK,SAACC,GAEL,IAAwB,IAApBA,EAASC,OAAb,CAKA,IAAMC,EAAcF,EAASG,UAAUD,YAEvCE,IAAMC,SAASC,QAAQC,OAAvB,+BAA2DL,GAE3D/C,EAASqD,YAAS,CAChBnD,SAAS,EACTO,GAAIO,EAAOP,GAAGK,SAGhBf,EAAQuD,cAbNzC,EAAW,8BAed0C,OAAM,SAAApC,GACLN,EAAWM,OA8DT,UACGI,EACD,sBAAKM,UAAU,eAAf,UACE,cAAC,IAAD,CAAMK,GAAG,IAAT,uBACA,cAAC,IAAD,CAAMA,GAAG,IAAT,6BACA,cAAC,IAAD,CAAMA,GAAG,IAAT,wBAEF,oBAAIL,UAAU,eAAeM,MAAO,CAAEvC,UAAW,SAAU4D,UAAW,QAAtE,SAAiF5C,IACjF,4BAAG,uBAAOkB,KAAK,SAAShB,MAAM","file":"static/js/10.488b8e84.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport ResetButton from './ResetButton';\r\nimport axiosApi, { Response } from '../modules/API';\r\nimport axios from 'axios';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../reducers';\r\nimport { setLogin } from '../reducers/Login';\r\nimport '../styles/Signin.css';\r\n\r\nconst titleStyle = {\r\n  color: '#1033e3',\r\n  textAlign: 'center' as const,\r\n  marginBottom: '50px'\r\n};\r\n\r\ninterface InputElement {\r\n  value: string;\r\n  invalid: boolean;\r\n}\r\n\r\ninterface LoginInfo {\r\n  id: InputElement;\r\n  pwd: InputElement;\r\n};\r\n\r\nconst SignIn = ({ history }: RouteComponentProps) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLogin } = useSelector((state: RootState) => ({\r\n    isLogin: state.login.isLogin\r\n  }));\r\n\r\n  useEffect(() => {\r\n    if (isLogin === true) {\r\n      history.replace('/');\r\n    }\r\n  }, [isLogin, history]);\r\n\r\n  const msg = {\r\n    id: 'ID is empty Enter your ID.',\r\n    pwd: 'Password is empty Enter your Password'\r\n  };\r\n\r\n  const [failMsg, setFailMsg] = useState<string>('');\r\n  const [inputs, setInputs] = useState<LoginInfo>({\r\n    id: { value: '', invalid: false },\r\n    pwd: { value: '', invalid: false }\r\n  });\r\n\r\n  const submintHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n\r\n    // post 방식으로 보낼 때 이벤트를 막아야 한다.\r\n    // 민감한 정보가 쿼리스트링으로 전달 \r\n    e.preventDefault();\r\n\r\n    // 유효하지 않거나 입력이 없을 때\r\n    const invalid = Object.entries(inputs).filter(([key, val]) => val.invalid || val.value.length <= 0);\r\n    if (invalid.length > 0)\r\n      return;\r\n\r\n    axiosApi.post(`/api/login`, {\r\n      \"id\": inputs.id.value,\r\n      \"pwd\": inputs.pwd.value\r\n    })\r\n      .then((response: Response) => {\r\n\r\n        if (response.result === false) {\r\n          setFailMsg('id or password is wrong');\r\n          return;\r\n        }\r\n\r\n        const accessToken = response.loginInfo.accessToken;\r\n        // Authorization 헤더에 토큰을 박는다.\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\r\n\r\n        dispatch(setLogin({\r\n          isLogin: true,\r\n          id: inputs.id.value\r\n        }));\r\n\r\n        history.goBack();\r\n      })\r\n      .catch(e => {\r\n        setFailMsg(e);\r\n      })\r\n  }\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: {\r\n        value: value,\r\n        invalid: value.length <= 0\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  const onReset = (inputName: string) => {\r\n    setInputs({\r\n      ...inputs,\r\n      [inputName]: {\r\n        value: '',\r\n        invalid: true\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  const inputList: JSX.Element[] = [\r\n    ['id', 'ID'], ['pwd', 'Password']]\r\n    .map((element, idx) => {\r\n\r\n      const [name, placeholder] = element;\r\n      const inputType: string = name === 'pwd' ? 'password' : 'text';\r\n\r\n      return (\r\n        <div key={idx} className='input-container'>\r\n          <input\r\n            type={inputType}\r\n            name={name}\r\n            placeholder={placeholder}\r\n            onChange={onChange}\r\n            value={inputs[name].value}\r\n          />\r\n          <ResetButton\r\n            inputLength={inputs[name].value.length > 0}\r\n            name={name}\r\n            onReset={() => onReset(name)}\r\n          />\r\n          {inputs[name].invalid &&\r\n            <h5 className='invalid-text'>{msg[name]}</h5>}\r\n        </div>\r\n      )\r\n    })\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className='login-container'>\r\n        <div className='login-wrapper'>\r\n          <Link to=\"/\">\r\n            <h1 style={titleStyle}>Mine Sweeper</h1>\r\n          </Link>\r\n          <form onSubmit={submintHandler}>\r\n            {inputList}\r\n            <div className='login-forgot'>\r\n              <Link to=\"/\">Forgot ID</Link>\r\n              <Link to=\"/\">Forgot Password</Link>\r\n              <Link to=\"/\">Sign Up</Link>\r\n            </div>\r\n            <h5 className='invalid-text' style={{ textAlign: 'center', marginTop: '15px' }}>{failMsg}</h5>\r\n            <p><input type='submit' value='Login'></input></p>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SignIn;"],"sourceRoot":""}